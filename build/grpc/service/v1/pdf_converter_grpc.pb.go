// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service/v1/pdf_converter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PDFConverterServiceClient is the client API for PDFConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDFConverterServiceClient interface {
	ConvertPDFToJPG(ctx context.Context, in *ConvertPDFToJPGRequest, opts ...grpc.CallOption) (*ConvertPDFToJPGResponse, error)
}

type pDFConverterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFConverterServiceClient(cc grpc.ClientConnInterface) PDFConverterServiceClient {
	return &pDFConverterServiceClient{cc}
}

func (c *pDFConverterServiceClient) ConvertPDFToJPG(ctx context.Context, in *ConvertPDFToJPGRequest, opts ...grpc.CallOption) (*ConvertPDFToJPGResponse, error) {
	out := new(ConvertPDFToJPGResponse)
	err := c.cc.Invoke(ctx, "/service.v1.PDFConverterService/ConvertPDFToJPG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDFConverterServiceServer is the server API for PDFConverterService service.
// All implementations should embed UnimplementedPDFConverterServiceServer
// for forward compatibility
type PDFConverterServiceServer interface {
	ConvertPDFToJPG(context.Context, *ConvertPDFToJPGRequest) (*ConvertPDFToJPGResponse, error)
}

// UnimplementedPDFConverterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPDFConverterServiceServer struct {
}

func (UnimplementedPDFConverterServiceServer) ConvertPDFToJPG(context.Context, *ConvertPDFToJPGRequest) (*ConvertPDFToJPGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertPDFToJPG not implemented")
}

// UnsafePDFConverterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFConverterServiceServer will
// result in compilation errors.
type UnsafePDFConverterServiceServer interface {
	mustEmbedUnimplementedPDFConverterServiceServer()
}

func RegisterPDFConverterServiceServer(s grpc.ServiceRegistrar, srv PDFConverterServiceServer) {
	s.RegisterService(&PDFConverterService_ServiceDesc, srv)
}

func _PDFConverterService_ConvertPDFToJPG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertPDFToJPGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFConverterServiceServer).ConvertPDFToJPG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.PDFConverterService/ConvertPDFToJPG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFConverterServiceServer).ConvertPDFToJPG(ctx, req.(*ConvertPDFToJPGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PDFConverterService_ServiceDesc is the grpc.ServiceDesc for PDFConverterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDFConverterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.PDFConverterService",
	HandlerType: (*PDFConverterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertPDFToJPG",
			Handler:    _PDFConverterService_ConvertPDFToJPG_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/v1/pdf_converter.proto",
}
